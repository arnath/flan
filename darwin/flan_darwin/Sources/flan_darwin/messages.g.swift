// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum NotificationAuthorizationOptions: Int {
  case badge = 0
  case sound = 1
  case alert = 2
  case carPlay = 3
  case criticalAlert = 4
  case providesAppNotificationSettings = 5
  case provisional = 6
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationContent {
  var title: String
  var subtitle: String? = nil
  var body: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NotificationContent? {
    let title = pigeonVar_list[0] as! String
    let subtitle: String? = nilOrValue(pigeonVar_list[1])
    let body: String? = nilOrValue(pigeonVar_list[2])

    return NotificationContent(
      title: title,
      subtitle: subtitle,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      subtitle,
      body,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NotificationAuthorizationOptions(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return NotificationContent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NotificationAuthorizationOptions {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? NotificationContent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlanApi {
  /// Retrieves the current notification settings as a map of key-value pairs.
  func getNotificationSettingsAsync(completion: @escaping (Result<[String: dynamic], Error>) -> Void)
  /// Requests notification authorization from the user with specified options.
  ///
  /// [options] specifies the types of notifications the application wants to send.
  /// Each option is an instance of [NotificationAuthorizationOptions]. Options must
  /// not be specified more than once.
  func requestAuthorizationAsync(options: [NotificationAuthorizationOptions], completion: @escaping (Result<Void, Error>) -> Void)
  /// Schedules a notification to be delivered at a specified [target] time.
  ///
  /// [id] is a unique identifier for the notification.
  /// [targetTimestamp] specifies the delivery time for the notification as an ISO8601 date string.
  /// [content] contains the details of the notification, such as title and body.
  /// [repeats] indicates whether the notification should repeat. Defaults to `false`.
  func scheduleNotificationAsync(id: String, targetTimestamp: String, content: NotificationContent, repeats: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  /// Cancels notifications with the specified [ids].
  ///
  /// [ids] is a list containing the unique identifiers of the notifications
  /// to be canceled.
  func cancelNotifications(ids: [String]) throws
  /// Retrieves a list of all scheduled notifications.
  ///
  /// Returns a list of maps, where each map represents the details of a
  /// scheduled notification.
  func getScheduledNotificationsAsync(completion: @escaping (Result<[[String: dynamic]], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlanApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `FlanApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlanApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Retrieves the current notification settings as a map of key-value pairs.
    let getNotificationSettingsAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flan.FlanApi.getNotificationSettingsAsync\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getNotificationSettingsAsyncChannel.setMessageHandler { _, reply in
        api.getNotificationSettingsAsync { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getNotificationSettingsAsyncChannel.setMessageHandler(nil)
    }
    /// Requests notification authorization from the user with specified options.
    ///
    /// [options] specifies the types of notifications the application wants to send.
    /// Each option is an instance of [NotificationAuthorizationOptions]. Options must
    /// not be specified more than once.
    let requestAuthorizationAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flan.FlanApi.requestAuthorizationAsync\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestAuthorizationAsyncChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! [NotificationAuthorizationOptions]
        api.requestAuthorizationAsync(options: optionsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestAuthorizationAsyncChannel.setMessageHandler(nil)
    }
    /// Schedules a notification to be delivered at a specified [target] time.
    ///
    /// [id] is a unique identifier for the notification.
    /// [targetTimestamp] specifies the delivery time for the notification as an ISO8601 date string.
    /// [content] contains the details of the notification, such as title and body.
    /// [repeats] indicates whether the notification should repeat. Defaults to `false`.
    let scheduleNotificationAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flan.FlanApi.scheduleNotificationAsync\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      scheduleNotificationAsyncChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let targetTimestampArg = args[1] as! String
        let contentArg = args[2] as! NotificationContent
        let repeatsArg = args[3] as! Bool
        api.scheduleNotificationAsync(id: idArg, targetTimestamp: targetTimestampArg, content: contentArg, repeats: repeatsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      scheduleNotificationAsyncChannel.setMessageHandler(nil)
    }
    /// Cancels notifications with the specified [ids].
    ///
    /// [ids] is a list containing the unique identifiers of the notifications
    /// to be canceled.
    let cancelNotificationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flan.FlanApi.cancelNotifications\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelNotificationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idsArg = args[0] as! [String]
        do {
          try api.cancelNotifications(ids: idsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cancelNotificationsChannel.setMessageHandler(nil)
    }
    /// Retrieves a list of all scheduled notifications.
    ///
    /// Returns a list of maps, where each map represents the details of a
    /// scheduled notification.
    let getScheduledNotificationsAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flan.FlanApi.getScheduledNotificationsAsync\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getScheduledNotificationsAsyncChannel.setMessageHandler { _, reply in
        api.getScheduledNotificationsAsync { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getScheduledNotificationsAsyncChannel.setMessageHandler(nil)
    }
  }
}
